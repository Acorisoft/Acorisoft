<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Assembly Name="EnvDTE80" #>
<#@ Assembly Name="VSLangProj" #><#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Reflection" #> 
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension="GenerateViewModels.cs" #>

using DryIoc;
using ReactiveUI;
using Acorisoft.Morisa.Tools.Views;
using Acorisoft.Morisa.Tools.ViewModels;

namespace Acorisoft.Morisa.Tools
{
    partial class App
    {
	    public void RegisterViews(IContainer container)
	    {
		    <#
                var projPath =  Host.ResolveAssemblyReference("$(ProjectDir)");
                var totalFiles = new List<string>(System.IO.Directory.GetFiles(projPath,"*.cs"));
                var dirQueue = new Queue<string>(System.IO.Directory.GetDirectories(projPath));
                // Message displayed in error window.
                //
                // XXXDialogView    XXXDialogViewFunction
                // XXXStepView      XXXStepViewFunction
                // XXXView          XXXViewModel
                while (dirQueue.Count > 0)
                {
                    var dir = dirQueue.Dequeue();

                    //
                    // 将所有cs文件加入当前文件
                    totalFiles.AddRange(System.IO.Directory.GetFiles(dir,"*.cs").Where(x => x.EndsWith(".cs") && !x.Contains("g.i")).Select(x => new FileInfo(x).Name.Replace(".cs", "").Replace(".xaml", "")));

                    foreach (var newDir in System.IO.Directory.GetDirectories(dir))
                    {
                        dirQueue.Enqueue(newDir);
                    }
                }

                var dict = new System.Collections.Generic.Dictionary<string,string>();

                foreach(var item in totalFiles)
                {
                    if(!dict.ContainsKey(item))
                    {
                        dict.Add(item,item);
                    }
                }

                var vm = string.Empty;

                //
                // dialog 
                /**foreach (var view in totalFiles.Where(x => x.EndsWith("DialogView")))
                {
                    vm = view + "Function";
                    if (dict.TryGetValue(vm, out var dvm))
                    {
                        WriteLine(string.Format("container.Register<{0}>();", dvm));
                        //
                        // pair with dialogview and dialogviewfunction
                        WriteLine("container.Register<IViewFor<{0}>,{1}>();", dvm, view);
                    }
                }**/

                //
                // step view 
                foreach (var view in totalFiles.Where(x => x.EndsWith("ViewFunction")))
                {
                    var v = view.Replace("Function","");
                    if (dict.TryGetValue(v, out var dvm))
                    {
                        WriteLine(string.Format("container.Register<{0}>();", view));
                        //
                        // pair with dialogview and dialogviewfunction
                        WriteLine("container.Register<IViewFor<{0}>,{1}>();", view, v);
                    }
                }

                //
                // dialog 
                foreach (var vm1 in totalFiles.Where(x => x.EndsWith("ViewModel")))
                {
                    var v = vm1.Replace("Model","");
                    if (dict.TryGetValue(v, out var dvm))
                    {
                        WriteLine(string.Format("container.Register<{0}>();", vm1));
                        //
                        // pair with dialogview and dialogviewfunction
                        WriteLine("container.Register<IViewFor<{0}>,{1}>();", vm1, v);
                    }
                }
		    #>
	    }
    }
}